#########################################################################
# Title:         Saltbox: Docker Role                                   #
# Author(s):     l3uddz, desimaniac, EnorMOZ                            #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check filesystem of '/var/lib/' path
  ansible.builtin.shell: stat -f -c %T /var/lib/
  register: var_lib_file_system
  changed_when: false

- name: Check to see if docker is installed
  ansible.builtin.stat:
    path: "/usr/bin/docker"
  register: docker_binary

- name: Populate Service Facts
  ansible.builtin.service_facts:

- name: Get Docker service state
  ansible.builtin.set_fact:
    docker_service_running: "{{ (services['docker.service'] is defined) and (services['docker.service']['state'] == 'running') }}"
  when: docker_binary.stat.exists

- name: Set '_remotes_list' variable
  ansible.builtin.set_fact:
    _remotes_services_list: "{{ _remotes_services_list | default('') + (rclone_service_template + rclone_remote_name + '.service ') }}"
  with_items: "{{ rclone.remotes }}"
  when: rclone_remote_is_defined and use_remote and item.template != "nfs"

- name: Tasks for when Docker exists and is running
  when: docker_binary.stat.exists and docker_service_running
  block:
    - name: Gather list of running Docker containers
      ansible.builtin.shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | sort | xargs echo -n"
      register: docker_running_containers
      ignore_errors: true
      changed_when: false

    - name: Stop all running Docker containers
      ansible.builtin.shell: "docker stop {{ docker_running_containers.stdout }} &> /dev/null || true"
      ignore_errors: true
      when: (docker_running_containers.stdout | trim | length > 0)

    - name: Import BTRFS Cleanup Tasks
      ansible.builtin.include_tasks: "subtasks/btrfs/cleanup.yml"
      when: ('btrfs' in var_lib_file_system.stdout)

    - name: Stop docker service
      ansible.builtin.systemd:
        name: docker
        state: stopped

- name: Check if overlay can be loaded
  block:
    - name: Add the overlay module
      community.general.modprobe:
        name: overlay
        state: present
      when: ('overlay' in docker_daemon_storage_driver)

  rescue:
    - name: Install missing modules package
      ansible.builtin.shell: "apt-get install --reinstall linux-modules-{{ ansible_kernel }}"

- name: "Import Daemon Tasks"
  ansible.builtin.import_tasks: "subtasks/daemon.yml"

- name: "Import Docker Binary tasks"
  ansible.builtin.include_tasks: "subtasks/binary/binary.yml"

- name: Import BTRFS Psuedo-File-System Tasks
  ansible.builtin.include_tasks: "subtasks/btrfs/pseudo_file_system.yml"
  when: ('btrfs' in var_lib_file_system.stdout)

- name: Start docker service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: true
    daemon_reload: true

- name: "Wait for {{ docker_containers_startup_delay }} seconds before commencing"
  ansible.builtin.wait_for:
    timeout: "{{ docker_containers_startup_delay }}"

- name: "Stop all Docker containers"
  ansible.builtin.shell: docker stop $(docker ps -aq) &> /dev/null || true

- name: "Import Docker Network tasks"
  ansible.builtin.import_tasks: "subtasks/network.yml"

- name: "Import Docker Housekeeping tasks"
  ansible.builtin.import_tasks: "subtasks/housekeeping.yml"
  tags: docker-housekeeping

- name: Docker Service Running
  when: docker_binary.stat.exists and docker_service_running and (docker_running_containers.stdout | trim | length > 0)
  block:
    - name: "Initialize Gluetun variable"
      ansible.builtin.set_fact:
        docker_containers_gluetun: []

    - name: "Identify any Gluetun containers"
      ansible.builtin.set_fact:
        docker_containers_gluetun: "{{ docker_containers_gluetun + [item] }}"
      loop: "{{ docker_running_containers.stdout.split() }}"
      when: item in (gluetun_instances | default(['gluetun']))

    - name: "Re-start all previously running Gluetun containers"
      ansible.builtin.shell: "docker start {{ docker_containers_gluetun | join(' ') }}"
      when: (docker_containers_gluetun | length > 0)
      ignore_errors: true

    - name: "Wait for 5 seconds"
      ansible.builtin.wait_for:
        timeout: 5

    - name: "Re-start all previously running Docker containers"
      ansible.builtin.shell: "docker start {{ docker_running_containers.stdout }}"
      ignore_errors: true

- name: "Import Docker Hub tasks"
  ansible.builtin.import_tasks: "subtasks/dockerhub.yml"
  tags: dockerhub
  when: dockerhub_is_enabled

- name: "Import DNS tasks"
  ansible.builtin.import_tasks: "subtasks/dns.yml"

- name: "Import Compose tasks"
  ansible.builtin.import_tasks: "subtasks/compose.yml"
  tags: docker-compose

- name: "Install ctop"
  ansible.builtin.include_role:
    name: ctop
  tags: ctop
